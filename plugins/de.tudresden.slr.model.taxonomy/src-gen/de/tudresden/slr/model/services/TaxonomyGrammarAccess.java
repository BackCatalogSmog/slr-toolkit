/*
* generated by Xtext
*/
package de.tudresden.slr.model.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class TaxonomyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cDimensionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDimensionsTermParserRuleCall_0 = (RuleCall)cDimensionsAssignment.eContents().get(0);
		
		//Model:
		//	dimensions+=Term*;
		public ParserRule getRule() { return rule; }

		//dimensions+=Term*
		public Assignment getDimensionsAssignment() { return cDimensionsAssignment; }

		//Term
		public RuleCall getDimensionsTermParserRuleCall_0() { return cDimensionsTermParserRuleCall_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cSubclassesAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cSubclassesTermParserRuleCall_1_1_0_0 = (RuleCall)cSubclassesAssignment_1_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Term:
		//	name=ID ("{" (subclasses+=Term ","?)* "}")?;
		public ParserRule getRule() { return rule; }

		//name=ID ("{" (subclasses+=Term ","?)* "}")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("{" (subclasses+=Term ","?)* "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//(subclasses+=Term ","?)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//subclasses+=Term
		public Assignment getSubclassesAssignment_1_1_0() { return cSubclassesAssignment_1_1_0; }

		//Term
		public RuleCall getSubclassesTermParserRuleCall_1_1_0_0() { return cSubclassesTermParserRuleCall_1_1_0_0; }

		//","?
		public Keyword getCommaKeyword_1_1_1() { return cCommaKeyword_1_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	
	
	private final ModelElements pModel;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tNEWLINE;
	private final TerminalRule tID;
	private final TermElements pTerm;
	
	private final Grammar grammar;

	@Inject
	public TaxonomyGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NEWLINE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.pTerm = new TermElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.tudresden.slr.model.Taxonomy".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	dimensions+=Term*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal WS:
	//	(" " | "\t")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal NEWLINE:
	//	"\r"? "\n";
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	} 

	//terminal ID:
	//	("A".."Z" | "a".."z") ("A".."Z" | "a".."z" | "_" | "-" | "0".."9" | " ")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//Term:
	//	name=ID ("{" (subclasses+=Term ","?)* "}")?;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
}
