/*
 * generated by Xtext 2.9.1
 */
package de.tudresden.slr.model.ide.contentassist.antlr;

import com.google.inject.Inject;
import de.tudresden.slr.model.ide.contentassist.antlr.internal.InternalTaxanomyParser;
import de.tudresden.slr.model.services.TaxanomyGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class TaxanomyParser extends AbstractContentAssistParser {

	@Inject
	private TaxanomyGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalTaxanomyParser createParser() {
		InternalTaxanomyParser result = new InternalTaxanomyParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_3(), "rule__Model__Group_3__0");
					put(grammarAccess.getModelAccess().getGroup_3_3(), "rule__Model__Group_3_3__0");
					put(grammarAccess.getTermAccess().getGroup(), "rule__Term__Group__0");
					put(grammarAccess.getTermAccess().getGroup_4(), "rule__Term__Group_4__0");
					put(grammarAccess.getTermAccess().getGroup_4_3(), "rule__Term__Group_4_3__0");
					put(grammarAccess.getModelAccess().getDimensionsAssignment_3_2(), "rule__Model__DimensionsAssignment_3_2");
					put(grammarAccess.getModelAccess().getDimensionsAssignment_3_3_1(), "rule__Model__DimensionsAssignment_3_3_1");
					put(grammarAccess.getTermAccess().getNameAssignment_2(), "rule__Term__NameAssignment_2");
					put(grammarAccess.getTermAccess().getSubclassesAssignment_4_2(), "rule__Term__SubclassesAssignment_4_2");
					put(grammarAccess.getTermAccess().getSubclassesAssignment_4_3_1(), "rule__Term__SubclassesAssignment_4_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalTaxanomyParser typedParser = (InternalTaxanomyParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TaxanomyGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TaxanomyGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
