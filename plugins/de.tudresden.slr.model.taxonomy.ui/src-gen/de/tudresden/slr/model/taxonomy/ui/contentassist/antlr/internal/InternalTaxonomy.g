/*
 * generated by Xtext
 */
grammar InternalTaxonomy;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package de.tudresden.slr.model.taxonomy.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.tudresden.slr.model.taxonomy.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.tudresden.slr.model.taxonomy.services.TaxonomyGrammarAccess;

}

@parser::members {
 
 	private TaxonomyGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(TaxonomyGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)?
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerm
entryRuleTerm 
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermAccess().getGroup()); }
(rule__Term__Group__0)
{ after(grammarAccess.getTermAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDimensionsAssignment_0()); }
(rule__Model__DimensionsAssignment_0)
{ after(grammarAccess.getModelAccess().getDimensionsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_1()); }
(rule__Model__Group_1__0)*
{ after(grammarAccess.getModelAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__0__Impl
	rule__Model__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getModelAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDimensionsAssignment_1_1()); }
(rule__Model__DimensionsAssignment_1_1)
{ after(grammarAccess.getModelAccess().getDimensionsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__0__Impl
	rule__Term__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getNameAssignment_0()); }
(rule__Term__NameAssignment_0)
{ after(grammarAccess.getTermAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getGroup_1()); }
(rule__Term__Group_1__0)?
{ after(grammarAccess.getTermAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__0__Impl
	rule__Term__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getLeftCurlyBracketKeyword_1_0()); }

	'{' 

{ after(grammarAccess.getTermAccess().getLeftCurlyBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__1__Impl
	rule__Term__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getGroup_1_1()); }
(rule__Term__Group_1_1__0)?
{ after(grammarAccess.getTermAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getRightCurlyBracketKeyword_1_2()); }

	'}' 

{ after(grammarAccess.getTermAccess().getRightCurlyBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Term__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1_1__0__Impl
	rule__Term__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getSubclassesAssignment_1_1_0()); }
(rule__Term__SubclassesAssignment_1_1_0)
{ after(grammarAccess.getTermAccess().getSubclassesAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getGroup_1_1_1()); }
(rule__Term__Group_1_1_1__0)*
{ after(grammarAccess.getTermAccess().getGroup_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1_1_1__0__Impl
	rule__Term__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getCommaKeyword_1_1_1_0()); }

	',' 

{ after(grammarAccess.getTermAccess().getCommaKeyword_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getSubclassesAssignment_1_1_1_1()); }
(rule__Term__SubclassesAssignment_1_1_1_1)
{ after(grammarAccess.getTermAccess().getSubclassesAssignment_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__DimensionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDimensionsTermParserRuleCall_0_0()); }
	ruleTerm{ after(grammarAccess.getModelAccess().getDimensionsTermParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__DimensionsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDimensionsTermParserRuleCall_1_1_0()); }
	ruleTerm{ after(grammarAccess.getModelAccess().getDimensionsTermParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getTermAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__SubclassesAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getSubclassesTermParserRuleCall_1_1_0_0()); }
	ruleTerm{ after(grammarAccess.getTermAccess().getSubclassesTermParserRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__SubclassesAssignment_1_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getSubclassesTermParserRuleCall_1_1_1_1_0()); }
	ruleTerm{ after(grammarAccess.getTermAccess().getSubclassesTermParserRuleCall_1_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_SL_COMMENT : '//';

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t')+;

RULE_NEWLINE : '\r'? '\n';

RULE_ID : ('A'..'Z'|'a'..'z') ('A'..'Z'|'a'..'z'|'_'|'-'|'0'..'9'|' ')*;


